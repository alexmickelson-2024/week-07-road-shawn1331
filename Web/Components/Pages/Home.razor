@page "/road"

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

@* link to sample page *@
<a href="/sample">View Sample Page</a>
@* br's for extra spacing *@
<br>
<br>
<br>
<div>@errors</div>

@if (road == null)
{
    <input placeholder="Number of Rows" @bind=stringRows />
    <input placeholder="Number of Columns" @bind=stringColumns />
    <button @onclick="CreateRoad">Create Road </button>

}
else
{
    <table>
        @for (int row = 0; row < road.RowCount; row++)
        {
            <tr>
                @for (int column = 0; column < road.ColCount; column++)
                {
                    <td>
                        @if (road.GetVehicle(row, column) != null)
                        {
                            <img src="@road.GetVehicle(row, column)?.GetImagePath()" height="100" />
                        }
                    </td>
                }
            </tr>
        }
    </table>
    <div>
        Set a Car

        <div>
            row: <input @bind=vehicleRowInput />
        </div>
        <div>
            column: <input @bind=vehicleColumnInput />
        </div>
        <button @onclick=@(() => SetVehicle("Car"))>Set Car</button>
        <button @onclick=@(() => SetVehicle("Bus"))>Set Bus</button>
        <button @onclick=@(() => SetVehicle("FireTruck"))>Set FireTruck</button>
        <button @onclick=@(() => SetVehicle("Taxi"))>Set Taxi</button>
    </div>
}

@code {

    string vehicleRowInput;
    string vehicleColumnInput;
    string stringRows;
    string stringColumns;
    IRoad? road = null;
    string errors;

    void CreateRoad()
    {
        bool successfulRows = int.TryParse(stringRows, out int intRows);
        if (!successfulRows)
        {
            errors = "That was an invalid for Rows. Try again.";
            return;
        }
        bool successfulColumns = int.TryParse(stringColumns, out int intColumns);
        if (!successfulColumns)
        {
            errors = "That was an invalid entry for Columns. Try again";
            return;
        }
        else
        {
            road = new Road(intRows, intColumns);
            errors = string.Empty;
        }
    }

    void SetVehicle(string vehicleType)
    {
        bool successfulRows = int.TryParse(vehicleRowInput, out int rowInput);

        if (!successfulRows)
        {
            errors = "That was an invalid for Rows. Try again.";
            return;
        }

        bool successfulColumns = int.TryParse(vehicleColumnInput, out int columnInput);

        if (!successfulColumns)
        {
            errors = "That was an invalid entry for Columns. Try again";
            return;
        }
        if (road == null)
        {
            errors = "The road has not been created yet.";
            return;
        }

        IVehicle vehicle = vehicleType switch
        {
            "Car" => new Car(),
            "Bus" => new Bus(),
            "FireTruck" => new FireTruck(),
            "Taxi" => new Taxi(),
            _ => throw new ArgumentException("Invalid vehicle type")
        };

        road.SetVehicle(rowInput, columnInput, vehicle);
    }
}


}